{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V7rOw_oiKl6d"
      },
      "source": [
        "https://pyimagesearch.com/2019/10/21/keras-vs-tf-keras-whats-the-difference-in-tensorflow-2-0/\n",
        "![Keras](https://929687.smushcdn.com/2633864/wp-content/uploads/2019/10/keras_vs_tfdotkeras_relationship.png?lossy=1&strip=1&webp=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Find the detailed explanation in:\n",
        "https://ruslanmv.com/blog/Neural-Networks-in-Tensorflow"
      ],
      "metadata": {
        "id": "z5vxPXHKEsS3"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u1Xc3ddTKl6d",
        "outputId": "c4509302-0a12-40ef-93dd-486ba18e5bba",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TensorFlow Version: 2.8.2\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "print('TensorFlow Version:', tf.__version__)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3WSP0R_9Kl6f"
      },
      "outputs": [],
      "source": [
        "def plot_random_examples(x, y, p=None):\n",
        "    indices = np.random.choice(range(0, x.shape[0]), 10)\n",
        "    y = np.argmax(y, axis=1)\n",
        "    if p is None:\n",
        "        p = y\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    for i, index in enumerate(indices):\n",
        "        plt.subplot(2, 5, i+1)\n",
        "        plt.imshow(x[index].reshape((28, 28)), cmap='binary')\n",
        "        plt.xticks([])\n",
        "        plt.yticks([])\n",
        "        if y[index] == p[index]:\n",
        "            col = 'g'\n",
        "        else:\n",
        "            col = 'r'\n",
        "        plt.xlabel(str(p[index]), color=col)\n",
        "    return plt\n",
        "\n",
        "def plot_results(history):\n",
        "    plt.figure(figsize=(12, 4))\n",
        "    epochs = len(history['val_loss'])\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(range(epochs), history['val_loss'], label='Val Loss')\n",
        "    plt.plot(range(epochs), history['train_loss'], label='Train Loss')\n",
        "    plt.xticks(list(range(epochs)))\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.legend()\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(range(epochs), history['val_acc'], label='Val Acc')\n",
        "    plt.xticks(list(range(epochs)))\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend()\n",
        "    return plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5qOM9viQKl6f"
      },
      "outputs": [],
      "source": [
        "#net = NeuralNewtwork(10,100,11)\n",
        "#10 features for each example\n",
        "#11 classes for each example\n",
        "#100 unit in the hidden layer\n",
        "\n",
        "class NeuralNetwork:\n",
        "    def __init__(self, layers):\n",
        "        self.layers = layers\n",
        "        self.L = len(layers)\n",
        "        self.num_features = layers[0]\n",
        "        self.num_classes = layers[-1]\n",
        "        \n",
        "        self.W = {}\n",
        "        self.b = {}\n",
        "        \n",
        "        self.dW = {}\n",
        "        self.db = {}\n",
        "        \n",
        "        self.setup()\n",
        "        \n",
        "    def setup(self):\n",
        "       \n",
        "        for i in range(1, self.L):\n",
        "            self.W[i] = tf.Variable(tf.random.normal(shape=(self.layers[i],self.layers[i-1])))\n",
        "            self.b[i] = tf.Variable(tf.random.normal(shape=(self.layers[i],1)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5OpFB30CKl6g"
      },
      "outputs": [],
      "source": [
        "class NeuralNetwork(NeuralNetwork):\n",
        "    def forward_pass(self, X):\n",
        "\n",
        "        A = tf.convert_to_tensor(X, dtype=tf.float32)\n",
        "        for i in range(1, self.L):\n",
        "            Z = tf.matmul(A,tf.transpose(self.W[i])) + tf.transpose(self.b[i])\n",
        "            if i != self.L-1:\n",
        "                A = tf.nn.relu(Z)\n",
        "            else:\n",
        "                A = Z\n",
        "        return A"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PInaNODPKl6g"
      },
      "outputs": [],
      "source": [
        "class NeuralNetwork(NeuralNetwork):\n",
        "    def compute_loss(self, A, Y):\n",
        "        loss = tf.nn.softmax_cross_entropy_with_logits(Y,A)\n",
        "        return tf.reduce_mean(loss)\n",
        "    \n",
        "    \n",
        "    def update_params(self, lr):\n",
        "        for i in range(1,self.L):\n",
        "            self.W[i].assign_sub(lr * self.dW[i])\n",
        "            self.b[i].assign_sub(lr * self.db[i])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6JrXYtq6Kl6g"
      },
      "outputs": [],
      "source": [
        "class NeuralNetwork(NeuralNetwork):\n",
        "    def predict(self, X):   # Softmax for normalizing the probability, argmax to return the index of the max. probability\n",
        "        A = self.forward_pass(X)\n",
        "        return tf.argmax(tf.nn.softmax(A), axis=1)\n",
        "    \n",
        "    def info(self):\n",
        "        num_params = 0\n",
        "        for i in range(1, self.L):\n",
        "            num_params += self.W[i].shape[0] * self.W[i].shape[1]\n",
        "            num_params += self.b[i].shape[0]\n",
        "        print('Input Features:', self.num_features)\n",
        "        print('Number of Classes:', self.num_classes)\n",
        "        print('Hidden Layers:')\n",
        "        print('--------------')\n",
        "        for i in range(1, self.L-1):\n",
        "            print('Layer {}, Units {}'.format(i, self.layers[i]))\n",
        "        print('--------------')\n",
        "        print('Number of parameters:', num_params)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qBjisVGQKl6h"
      },
      "outputs": [],
      "source": [
        "class NeuralNetwork(NeuralNetwork):\n",
        "    def train_on_batch(self, X, Y, lr):\n",
        "         \n",
        "        X = tf.convert_to_tensor(X, dtype=tf.float32)\n",
        "        Y = tf.convert_to_tensor(Y, dtype=tf.float32)\n",
        "          \n",
        "        with tf.GradientTape(persistent=True) as tape:\n",
        "            A = self.forward_pass(X)\n",
        "            loss = self.compute_loss(A, Y)\n",
        "        for i in range(1, self.L):\n",
        "            self.dW[i] = tape.gradient(loss, self.W[i])\n",
        "            self.db[i] = tape.gradient(loss, self.b[i])\n",
        "        del tape\n",
        "        self.update_params(lr)\n",
        "        return loss.numpy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Nyd6aPMIKl6h"
      },
      "outputs": [],
      "source": [
        "class NeuralNetwork(NeuralNetwork):\n",
        "    def train(self, x_train, y_train, x_test, y_test, epochs, steps_per_epoch, batch_size, lr):\n",
        "\n",
        "        history = {\n",
        "            'val_loss':[],\n",
        "            'train_loss':[],\n",
        "            'val_acc':[]\n",
        "        }\n",
        "        \n",
        "        for e in range(0, epochs):\n",
        "            epoch_train_loss = 0.\n",
        "            print('Epoch{}'.format(e), end='.')\n",
        "            for i in range(0, steps_per_epoch):\n",
        "                x_batch = x_train[i*batch_size:(i+1)*batch_size]\n",
        "                y_batch = y_train[i*batch_size:(i+1)*batch_size]\n",
        "                \n",
        "                batch_loss = self.train_on_batch(x_batch, y_batch,lr)\n",
        "                epoch_train_loss += batch_loss\n",
        "                \n",
        "                if i%int(steps_per_epoch/10) == 0:\n",
        "                    print(end='.')\n",
        "                    \n",
        "            history['train_loss'].append(epoch_train_loss/steps_per_epoch)\n",
        "            val_A = self.forward_pass(x_test)\n",
        "            val_loss = self.compute_loss(val_A, y_test).numpy()\n",
        "            history['val_loss'].append(val_loss)\n",
        "            val_preds = self.predict(x_test)\n",
        "            val_acc =    np.mean(np.argmax(y_test, axis=1) == val_preds.numpy())\n",
        "            history['val_acc'].append(val_acc)\n",
        "            print('Val acc:',val_acc)\n",
        "        return history"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0ChWz6E2Kl6j",
        "outputId": "940b2812-56ce-49d1-a8ea-5c66e955aca4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 951
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n",
            "11501568/11490434 [==============================] - 0s 0us/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGEAAABiCAYAAABAkr0NAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAK4klEQVR4nO2dy28b1xWHvzMPvoakKJKSQ0uin4IQI3HkwnCbtIsCRYMgmxRZFA6CIosCWaQFWqAbo11023bRP8BAg2ZRtCjQAs2ucYMCTjdGXMd9OEYdu4ZtSTYliu+X+LpdSJzKjmzT4pAcR/MBAw4vObyH/M2999xzD2dEKYXHeNHGbYCHJ4Ir8ERwAZ4ILsATwQV4IriAgUQQkVdE5D8icl1Ezjhl1F5DdjtPEBEduAZ8E1gCPgbeUEp96px5e4NBWsIp4LpS6r9KqSbwO+A1Z8zaWxgDHDsD3Nn2fAn48qMOEJG9Pj3PKqWmHiwcRIS+EJG3gbeHXc9Twq2dCgcRYRmY2/Z8dqvsPpRSZ4Gz4LWEhzHImPAxMC8ih0TEB5wG3nfGrL3FrluCUqotIt8H/gzowLtKqSuOWbaH2LWLuqvKvO7o70qpkw8WejNmF+CJ4AI8EVyAJ4ILGPpk7YuAiCAiaJqGiNDpdOh2u459vifCY4hEIkxPT5NIJHjppZcIBoOcP3+ea9euUavVqFarA9fhifAYLMtidnaWw4cP8+abbzI5OUmhUGBtbQ3giyeCpmlEo1F8Ph+GYaDrOtVqlXw+z7hSc/x+P/F4nEgkQqVSAaDVaiEijtXhKhEMw2BmZoZYLEYwGCQQCLC0tESpVKLdbo/FJsuymJubI5FIkM1myefzjpz923GVCJqmEQ6HiUajRCIRQqEQhULB0bNuNzb1TgjDMNA05x1KV4lgmibpdJp0Ok08HicajaKU4uLFi7RarZHbIyKEQiGSySSJRIJkMglAIBBwtB5XidBrCfF4nFgsRjQaJRgMjqUl9FxS0zQJh8OEQiEMw7Bd006n49g45SoR/H4/x44dY3FxkXK57Hjf+yT0uqB0Os2LL76IruvcvXuXfD7PysoKmUyGZrPpSF2umjHrus4zzzzDwYMHmZiYGKstpmkSDAZJJpMcPnyY/fv302g0yOfzFItFyuUyGxsbjtT1WBFE5F0RWRWRf28ri4vIORH5bOtx0gljet3OOAdi2OwWFxYWePnllzl+/DiGYdDpdCiXyxQKBcdagF1fH+/5NfDKA2VngA+VUvPAh1vPnTFoKzQwTjRN4/jx47z++uucPHkSwzBot9sUCgVyudzoRVBKnQdyDxS/Bry3tf8e8K1BjNB1HcuyCIVCBAIBfD4fuq4P8pEDYxiG7Zb24kU9ERqNhrN17fK4fUqpu1v794B9gxgRCARIpVLMzs7arqnf7x/kIwfGNE0CgYBtR6PR4Pr161y7do1SqeRoXQN7R0op9ahly35SXnRdJxwOE4lE7JDFuLokTdPQdR3DMPD7/ei6jojQ7XZpNBpUq1XHZ++7FSEjIiml1F0RSQGrD3tjPykvkUiEZ599lnQ6TSwWwzTNsXRHmqYRCoUIBoPE43GSySThcBgRod1uUyqVxjYw78T7wFtb+28BfxrECNM0SSQSxONx/H6/HRpQSo00cCci+P1+W4hQKITP50MpRbfbZWNjg1ar5ehaAvTREkTkt8DXgaSILAE/BX4G/F5EvstmVtm3BzHC5/MRj8eJx+OYpglAuVwmk8lQKpUc/9IPIxAIcOrUKQ4cOMDCwgKWZdHpdMjlcuTzeer1OhsbG3Q6HUfrfawISqk3HvLSN5wywjRNYrEYExMTmKaJUopqtcr6+jqVSmVkrSEQCLC4uMhzzz3HkSNHsCyLcrlMsVikWCzSaDTG0xLGRa1WY319nXK57LgIuq6jaRqWZRGNRu8L0i0sLJBOp4lEIgDk83muXLnCjRs3KJfLNJvNvSGCUop8Ps+tW7fIZrOOf2nTNDFNk9nZWY4ePUoqleLUqVPE43FeeOEFEomE7ZqurKxw7tw5lpeXyWaz1Ot1R20Bl4rQL4ZhYBibX6G3GB8IBNB13d56r/UmhIZh2G7wzMyMHTYPh8MEg0FM07zPRW42mxQKBYrF4tAWllwrgt/vx7IsAoHAQ+cMkUiEqakpWwCfz8eRI0eYmJiww889vz8ajbK4uEg0GkXTNHvTdZ1Go0Eul7Nnxu122w5ll8tlu0U67Zr2cIUID7qiPVext8IWiUQ+t6gjIkxOTtoiwGb4eWZmhsnJSaLRKJZl2T9mLBbj6NGj9kIRYLucSil70G2323S7XdumdrtNpVKhVqsNzUtzhQjdbpdWq0Wr1aLT6SAinDhxgng8Ti6XY2lpaUe3cGpqin379tmzWk3T7Fl373m9XqdYLNLtdrly5QqdTsf2urLZLJlMhlqtxurqKpOTk7zzzjtMTExgGAZKKWq1GmtraxQKhS9+d9TpdOzVKhFhdnaW6elpO9tip7MwmUySSqXs7qj3OUop258vFot2t9LzcG7fvk02m2V5eZmbN2/SaDQolUqkUilOnz5tJ3cppWi1WkNfYHKFCLlcjo8++ojp6WlEhLm5OTui2mw2qdVqOx7X7Xap1+vU63VWV1dpNBpUKhWazSb5fJ5SqUS9XqdSqbCxscH6+jobGxt2xkShUKBUKhEMBpmfn2d2dpZEIkEwGLTXD+r1+tDnKa4QYXV1lQ8++IBoNEqn0+HgwYOk02lSqdQjj+tlYqytrfHJJ59QLpdZWVmhUqlw584d7t7dDPRu/xF7+9sfw+Ewzz//PHNzc0xNTREKhewVtFqttjdEgM2zutlssry8bJ+F9+7d6+vYQqHArVu3qNVqZLPZJ452mqZph018Ph/w/7BJsVjcOyIA1Ot1Lly4YGff9RtJ7QmolLLHhCcZRC3LYn5+3u4GlVLcuXOHy5cvc/PmTcdjRQ/iKhGUUkOZkT6Onkvs8/nsCG6tViOXy40kduUqEdxCt9tlaWmJS5cucfv27aG3BFelvLiJarXK6urqSFpCPykvcyLyVxH5VESuiMgPtsqHkvayF+mnJbSBHymljgFfAb4nIscYYtrLXqOflJe7SqlLW/tl4CqbFxdxNO3FLfRm373YldPJvzvxRGOCiBwETgAXcDjtxU2IiP03qV7UdZj07R2JSBj4A/BDpVRpe3j5UWkvT+tVXnprEMMWAPpsCSJisinAb5RSf9wqzmylu/CotBel1Fml1MmdLifgVnre0Khyn/rxjgT4FXBVKfXLbS85mvbiFnoCaJpmz9yHTT/d0VeB7wD/EpHLW2U/xuG0FzchIiQSCQ4dOmSHwodJPykvfwMe1i4dS3txG5Zl3ZeBN0y8GfMDbF8gGhWeCA9hlEJ4ATyg3W6Ty+WwLGtoGRWPwmsJQKVS4erVq1y9epVqtTryRGSvJYC9Jh0MBllaWsLn85HJZMjlcrYow8S7Bh6bWeGxWAy/38/+/fsJhUKUSiUqlQqlUolMJuNUztGO18DzRBgt3oUI3YonggvwRHABngguwBPBBYx6npAFqluPTxtJBrf7wE6FI3VRAUTk4tO0wNNjmHZ73ZEL8ERwAeMQ4ewY6nSCodk98jHB4/N43ZELGJkIT8vdCceSe9tbwBjmxuY9d24AhwEf8A/g2Cjq3oWtKeBLW/sRNu+qeAz4BXBmq/wM8HOn6hxVS3hq7k44jtzbUYmw090JZ0ZU964ZVe6tNzA/hAdzb7e/pjb7JMfcylGJ0NfdCd3CILm3u2FUIjw1dyccS+7tCL2OV9n0NG4APxm3F/QIO7/GZlfzT+Dy1vYqkGDzH0mfAX8B4k7V6c2YXYA3MLsATwQX4IngAjwRXIAnggvwRHABngguwBPBBfwP4+2+QZIeti8AAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "from keras.datasets import mnist\n",
        "from matplotlib import pyplot\n",
        "\n",
        "(train_X, train_y), (test_X, test_y) = mnist.load_data()\n",
        "\n",
        "for i in range(9):  \n",
        "    pyplot.subplot(330 + 1 + i)\n",
        "    pyplot.imshow(train_X[i], cmap=pyplot.get_cmap('gray'))\n",
        "    pyplot.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RnP6pcLlKl6j",
        "outputId": "5465dc46-94a4-496c-8934-806ad206fb35",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input Features: 784\n",
            "Number of Classes: 10\n",
            "Hidden Layers:\n",
            "--------------\n",
            "Layer 1, Units 128\n",
            "Layer 2, Units 128\n",
            "--------------\n",
            "Number of parameters: 118282\n"
          ]
        }
      ],
      "source": [
        "net = NeuralNetwork([784,128,128,10])\n",
        "net.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MRD-t9vEKl6k",
        "outputId": "5da06f8d-ef69-41fa-be7c-c0a5ddd38ea3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2 2 3]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(2, 6), dtype=int32, numpy=\n",
              "array([[ 1,  2,  3,  4,  5,  6],\n",
              "       [ 7,  8,  9, 10, 11, 12]], dtype=int32)>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "t1 = [[[1, 2, 3],\n",
        "      [4, 5, 6]],[[7, 8, 9],\n",
        "      [10, 11, 12]]]\n",
        "print(tf.shape(t1).numpy())\n",
        "\n",
        "t2 = tf.reshape(t1, [2, 6])\n",
        "t2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qcNbBK0uKl6k",
        "outputId": "23694cd6-9ea0-486d-d7cd-b6a4cd2af0de",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(60000, 28, 28)\n",
            "(60000,)\n",
            "(60000, 10)\n",
            "(10000, 28, 28)\n",
            "(10000,)\n",
            "(10000, 10)\n",
            "Steps per epoch 500\n"
          ]
        }
      ],
      "source": [
        "batch_size = 120\n",
        "epochs = 5\n",
        "print(train_X.shape)\n",
        "train_X = np.reshape(train_X, [60000, 784])/255\n",
        "print(train_y.shape)\n",
        "train_y = tf.keras.utils.to_categorical(train_y)\n",
        "print(train_y.shape)\n",
        "print(test_X.shape)\n",
        "test_X = np.reshape(test_X, [10000, 784])/255\n",
        "print(test_y.shape)\n",
        "test_y = tf.keras.utils.to_categorical(test_y)\n",
        "print(test_y.shape)\n",
        "steps_per_epoch = int(train_X.shape[0]/batch_size)\n",
        "lr = 3e-3\n",
        "print('Steps per epoch', steps_per_epoch)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6OCE_5CiKl6k",
        "outputId": "b0d5a06d-fb97-4026-b9f6-dc36ea5f5164",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch0...........Val acc: 0.7938\n",
            "Epoch1...........Val acc: 0.8217\n",
            "Epoch2...........Val acc: 0.8339\n",
            "Epoch3...........Val acc: 0.843\n",
            "Epoch4...........Val acc: 0.8481\n"
          ]
        }
      ],
      "source": [
        "history = net.train(\n",
        "    train_X, train_y,\n",
        "    test_X, test_y,\n",
        "    epochs, steps_per_epoch,\n",
        "    batch_size, lr)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LmqqLyIbKl6k",
        "outputId": "8992b748-d6b2-45e5-b42b-614547af7048",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plot_results(history).show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F4j52_w7Kl6k"
      },
      "outputs": [],
      "source": [
        "preds = net.predict(test_X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q04CiwltKl6l",
        "outputId": "5eaab08e-3209-4bce-e797-68c59e4c4fd5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plot_random_examples(test_X,test_y,preds.numpy()).show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3.10.4 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.4"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1"
      }
    },
    "colab": {
      "name": "TensorFlowWithoutKeras_CSUMS2022.ipynb",
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}